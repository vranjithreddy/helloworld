# launching aws ec2 instance using Ansible CM
- name: Creating the Ec2 instance
  hosts: localhost

#key pairs, security groups and type for ec2 instance considering variables here
  vars:
          key pair name: traffic1
          instance-type: t2.micro
          security group name: default
# linux image ID
          image: ami-c5062ba0
          region: US EAST (Ohio)
          tasks:
                  - name: Lanuch AWS EC2 Instance
                    ec2:
                            key pair name: "{{******}}"
                            security group name: "{{*****}}"
                            instance-type: "{{t2.micro}}"
                            image: "{{ami-c5062ba0}}"
                            wait: true
                            region: "{{us east ohio}}"
                            vpc_subnet-id: subnet-******
                            assign_public_ip: yes
                     register: ec2
                  - name: Add new instance to host group
                    add-host: hostname={{item.public_ip}} groupname=launched
                    with: "{{ec2.instances}}"
                  - name: wait for SSH
                    wait_for: host={{item.public_dns_name}}
                    with_items: "{{ec2.instances}}"
                  - name: Configure instance
                    hosts: launched
                    become: true
        # EC2_VPc Security group
                  - name: apache instance security group
                    ec2_group:
                            name: default
                            description: default VPC Security group
                            vpc_id: vpc-******
                            aws_secret_key: SECRET
                            access_key: ACCESS
                            rules_egress:
                                  - proto: all tcp
                                    from_port: 22
                                    to_port: 22
                                    Security group id: sg-*****
                                  - proto: http
                                    from_port: 80
                                    to_port: 80
                                    cidr_ip: 0.0.0.0/0
                                  - proto: https
                                    from_port: 443
                                    to_port: 443
                                    cidr_ip: 0.0.0.0/0

            #Configuring Elastic Load Balancer
                                  - local action:
                                          name: "ec2"
                                          state: present
                                          instance_id: i-*************
                                          subnet: subnet-*********
                                          module: ec2_elb-lb
                                          listeners:
                                                  - protocol: https
                                                    load_balancer_port: 443
                                                    instance_port: 80

             # creating and assigning launch config 
                      - name: create launch config
                        ec2 launch config:
                                name: launch_config1
                                image_id: ami-c5062ba0
                                key pair name: ********
                                region: us-east-ohio
                                security group: sg-********
                                instance-type: t2.micro
                                assign_public_ip: yes
                         ec2 auto scaling group:
                                 name: asg1
                                 launchconfig_name: launch_config1
                                 healthcheck: 30
                                 healthchecktype: ELB
                                 replace-all-instances: yes
                                 min-size: 2
                                 max-size: 2
                                 desired-caapcity: 2
                                 region: us east ohio
                 # Set up autoscaling policy for scaling up and down
                      - ec2_scalingup_policy:
                              state: present
                              region: us east ohio
                              name: "Scaleup"
                              adjustment_type: "ChangeInCapacity"
                              asg_name: asg1
                              scaling_audjustment: +1
                              cooldown: 300
                        - ec2_scalingdown_policy:
                                state: present
                                region: us east ohio
                                name: "scaledown"
                                adjustment_type: "ChangeInCapacity"
                                asg_name: asg1
                                scaling_adjustment: -1
                                cooldown: 300
          # Cloudwatch alaram which sends notification when reaches the specified threshold limit
                        - name: Create CloudWatch alaram
                          ec2-alaram scaleup:
                                  state: present
                                  region: us-east-ohio
                                  name: "cpu-high"
                                  metric: "CPUUtilization"
                                  namespace: "AWS/EC2"
                                  static: Average
                                  comaprison: ">="
                                  threshold: 70.0
                                  period: 300
                                  evaluation_periods: 3
                                  description: "this metric is set in such a way that when an instance cpu usage avg is higher than 70% for 5 mins then this will alarm"
                                  dimensions: {'InstanceID' : 'ami-c5062ba0'}
                                  alarmaction: ["scaleup"]
                             ec2-alaram scaledown:
                                     state: present
                                     region: us east ohio
                                     name: "cpu-low"
                                     metric: "CPUUtilization"
                                     namespace: "AWS/EC2"
                                     statistic: Average
                                     comparison: "<="
                                     threshold: 10.0
                                     period: 300
                                     evaluation_periods: 3
                                     description: "this metric is set in such a way that when an instance cpu avg is less than or equal to 10% for 5 mins then this will alarm"
                                     dimensions: {'InstanceID' : 'ami-c5062ba0'}
                                     alarmaction: ["scaleup"]
                                     
